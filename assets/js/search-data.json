{
  
    
        "post0": {
            "title": "Title",
            "content": "&gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: suyeon - categories: [python, grammer] . File &#34;&lt;ipython-input-1-a08b3d658529&gt;&#34;, line 2 &gt; &#34;Awesome summary&#34; ^ SyntaxError: invalid syntax . 파이썬 기본 문법 . - 변수 선언, 식별자, 자료형, 형변환, 연산자 학습 . 주석(commit)과 출력(print) | # 코드에 대한 설명이나 중간에 코드를 실행시키고 싶지 않을 때 사용 # 단축키 :ctrl + / print(1) # print(2) print(3) . # 코드 중간에 변수에 들어있는 값을 확인할 때 사용 . a = 1 b = 2 print(b) c = 3 b = 4 print(b) . 2 4 . # docstring : 함수에 대한 설명: 단축키(shift + tab) # 자동완성: tab print(1, 2, sep=&quot;-&quot;, end=&quot; t&quot;) # 마지막을 tap으로 변경 print(3) print . 1-2 3 . 변수 선언 | RAM 저장 공간에 값을 할당하는 행위 | . a = 1 b = 2 a + b . 3 . d, e = 3, 4 f = g = 5 print(d) print(e) print(f) print(g) . 3 4 5 5 . 식별자 변수, 함수, 클래스, 모듈 등의 이름을 식별자라고 합니다. | 식별자 규칙 | 소문자, 대문자, 숫자, _(언더스코어)를 사용 | 가장 앞에 숫자 사용 불가 ex) 10a = 5 &lt;&lt; 안됨 | 예약어의 사용 불가 : def, class, try, except ... | 컨벤션(convention: 관례, 관습) snake case : fast_campus : 변수선언, 함수 선언할 때 사용 | camel case : FastCampus, fastCampus : 클래스 선언할 때 사용 | . | . | 데이터 타입 RAM 저장공간을 효율적으로 사용하기 위해서 저장공간의 타입을 설정 | 동적타이핑: | 변수 선언시 저장되는 값에 따라서 자동으로 데이터 타입이 설정 | 기본 데이터 타입: int, float, bool(논리값을 갖는 데이터 타입), str | 컬렉션 데이터 타입 : list(순서 있고, 수정 가능), tuple(순서 있고, 수정 불가), dict(순서 없고, 키와 value값을 갖음) | . | a = 1 b = &quot;python&quot; type(a), type(b) . (int, str) . a = 1 b = 1.2 c = True #false d = &quot;data&quot; type(a), type(b), type(c), type(d) . (int, float, bool, str) . a + b . 2.2 . a + d . TypeError Traceback (most recent call last) &lt;ipython-input-24-4fbab87c839c&gt; in &lt;module&gt; -&gt; 1 a + d TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;str&#39; . d.upper() . &#39;DATA&#39; . d . &#39;data&#39; . e =d.upper() e . &#39;DATA&#39; . f = &quot; Fast campus &quot; . f.lower() . &#39; fast campus &#39; . f.strip() . &#39;Fast campus&#39; . f.replace(&quot;Fast&quot;, &quot;Slow&quot;) . &#39; Slow campus &#39; . dir(f) . [&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__getnewargs__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mod__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__rmod__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;capitalize&#39;, &#39;casefold&#39;, &#39;center&#39;, &#39;count&#39;, &#39;encode&#39;, &#39;endswith&#39;, &#39;expandtabs&#39;, &#39;find&#39;, &#39;format&#39;, &#39;format_map&#39;, &#39;index&#39;, &#39;isalnum&#39;, &#39;isalpha&#39;, &#39;isascii&#39;, &#39;isdecimal&#39;, &#39;isdigit&#39;, &#39;isidentifier&#39;, &#39;islower&#39;, &#39;isnumeric&#39;, &#39;isprintable&#39;, &#39;isspace&#39;, &#39;istitle&#39;, &#39;isupper&#39;, &#39;join&#39;, &#39;ljust&#39;, &#39;lower&#39;, &#39;lstrip&#39;, &#39;maketrans&#39;, &#39;partition&#39;, &#39;replace&#39;, &#39;rfind&#39;, &#39;rindex&#39;, &#39;rjust&#39;, &#39;rpartition&#39;, &#39;rsplit&#39;, &#39;rstrip&#39;, &#39;split&#39;, &#39;splitlines&#39;, &#39;startswith&#39;, &#39;strip&#39;, &#39;swapcase&#39;, &#39;title&#39;, &#39;translate&#39;, &#39;upper&#39;, &#39;zfill&#39;] . # 문자열은 순서가 있는 문자들의 집합 . g = &quot;abcdefg&quot; . g[2] . &#39;c&#39; . numbers = &quot;123456789&quot; # 97531로 출력되도록 코드를 작성하라 . result = numbers[::2] result[::-1] . &#39;97531&#39; . numbers[::2][::-1] . &#39;97531&#39; . &#52972;&#47113;&#49496; &#45936;&#51060;&#53552; &#53440;&#51077; : list, tuple, dict . list [] : 순서가 있는 수정이 가능한 데이터 타입 | tuple (): 순서가 있는 수정이 불가능한 데이터 타입 | dict {} : 순서가 없고 키:값으로 구성되어 있는 데이터 타입 | . ls = [1, 2, 3, &quot;four&quot;, [5, 6], True, 1.2] type(ls), ls . (list, [1, 2, 3, &#39;four&#39;, [5, 6], True, 1.2]) . ls[3] . &#39;four&#39; . . ls = [1, 5, 2, 4] . ls.append(3) ls . [1, 5, 2, 4, 3] . ls.sort() ls[::-1] # 내림차순 함수가 없으므로 해당 예문과 같이 사용함 . [5, 4, 3, 2, 1] . # ctrl + enter :현재 셀을 계속 실행 num = ls.pop() num, ls . (4, [1, 2, 3]) . . ls1 = [1, 2, 3] ls2 = ls1 # 주소값을 참조해서 내부 데이터 출력(주솟값 복사, 얕은 복사) ls1, ls2 . ([1, 2, 3], [1, 2, 3]) . ls1[2] = 5 ls1, ls2 . ([1, 2, 5], [1, 2, 5]) . ls3 = ls1.copy() ls1, ls3 . ([1, 2, 5], [1, 2, 5]) . ls1[2] = 10 . ls1, ls3 . ([1, 2, 10], [1, 2, 5]) . # 튜플은 리스트보다 같은 데이터를 가졌을 때 공간을 적게 사용 # 수정이 되지 않는 콜렉터를 쓸 경우 튜플을 쓰는 것이 좋다 . tp1 = 1, 2, 3 tp2 = (4, 5, 6) type(tp1), type(tp2), tp1, tp2 . (tuple, tuple, (1, 2, 3), (4, 5, 6)) . a, b = 1, 2 a, b . (1, 2) . tp1[1], tp1[::-1] . (2, (3, 2, 1)) . import sys ls = [1, 2, 3] tp = (1, 2, 3) print(sys.getsizeof(ls), sys.getsizeof(tp)) . 80 64 . dict {} . 순서가 없고 {키,값}으로 구성되어 있는 데이터 타입 | . # 인덱스 대신 키를 사용 dic = { 1 : &quot;one&quot;, &quot;two&quot; : 2, &quot;three&quot; : [1, 2, 3], } type(dic), dic . (dict, {1: &#39;one&#39;, &#39;two&#39;: 2, &#39;three&#39;: [1, 2, 3]}) . dic[1], dic[&quot;three&quot;] . (&#39;one&#39;, [1, 2, 3]) . dic[&quot;two&quot;] = 123 dic . {1: &#39;one&#39;, &#39;two&#39;: 123, &#39;three&#39;: [1, 2, 3]} . # 도시 :seoul, busan, daegu # 인구 : 9,700,000 , 3,400,000, 2,400,000 . city = [&quot;seoul&quot;, &quot;busan&quot;, &quot;daegu&quot;] population = [9700000, 3400000, 2400000] . data = { &quot;seoul&quot; : 9700000, &quot;busan&quot; : 3400000, &quot;daegu&quot; : 2400000, } . sum(population) . 15500000 . sum(data.values()) . 15500000 . list(data.values()) . [9700000, 3400000, 2400000] . 형변환 | 데이터 타입을 변환하는 방법 | int, float, bool, str, list, tuple, dict | . a = 1 b = &quot;2&quot; a + int(b) . 3 . str(a) + b . &#39;12&#39; . city, population . ([&#39;seoul&#39;, &#39;busan&#39;, &#39;daegu&#39;], [9700000, 3400000, 2400000]) . list(zip(city, population)) . [(&#39;seoul&#39;, 9700000), (&#39;busan&#39;, 3400000), (&#39;daegu&#39;, 2400000)] . result = dict(list(zip(city, population))) result . {&#39;seoul&#39;: 9700000, &#39;busan&#39;: 3400000, &#39;daegu&#39;: 2400000} . data1 = list(result.keys()) data2 = list(result.values()) data1, data2 . ([&#39;seoul&#39;, &#39;busan&#39;, &#39;daegu&#39;], [9700000, 3400000, 2400000]) . string = &quot;python&quot; int(string) . ValueError Traceback (most recent call last) &lt;ipython-input-127-3eb1982ee741&gt; in &lt;module&gt; 1 string = &#34;python&#34; -&gt; 2 int(string) ValueError: invalid literal for int() with base 10: &#39;python&#39; .",
            "url": "https://metaego.github.io/metaegoblog/2021/07/18/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95.html",
            "relUrl": "/2021/07/18/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95.html",
            "date": " • Jul 18, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://metaego.github.io/metaegoblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://metaego.github.io/metaegoblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://metaego.github.io/metaegoblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://metaego.github.io/metaegoblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}